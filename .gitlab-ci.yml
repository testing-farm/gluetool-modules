---

stages:
  - build
  - test
  - deploy

# Use our custom image. See https://gitlab.com/testing-farm/images/-/tree/master/python-ci-image
image: "quay.io/testing-farm/python-ci-image:2023-09-21-f3e8c41e"

#
# Poetry and MyPy colors
#
.colors:
  variables:
    TERM: "xterm"
    POETRY_ADDOPTS: "--ansi"
    MYPY_FORCE_COLOR: "1"
    PYTEST_ADDOPTS: "--color=yes"

#
# Common variables
#
variables:
  BUILDAH_TAG: v1.29.0

#
# Mark tests to run for merge requests
#
.merge-request:
  rules:
    - if: $CI_MERGE_REQUEST_IID

#
# TEST steps
#
.tests:
  extends: [.colors, .merge-request]
  before_script:
    - dnf -y install krb5-devel libcurl-devel popt-devel postgresql-devel libxml2-devel

# Build, test and expose the container image
container:
  extends: .merge-request
  stage: build
  image: quay.io/buildah/stable:$BUILDAH_TAG
  variables:
    GOSS_PATH: /usr/bin/goss
    GOSS_DOWNLOAD_URL: https://github.com/goss-org/goss/releases/download/v0.3.21
  script:
    - dnf -y install make poetry python3.9 podman-docker
    - curl -L $GOSS_DOWNLOAD_URL/goss-linux-amd64 -o /usr/bin/goss && chmod +rx /usr/bin/goss
    - curl -L $GOSS_DOWNLOAD_URL/dgoss -o /usr/bin/dgoss && chmod +rx /usr/bin/dgoss
    - buildah login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io
    - IMAGE_TAG=$CI_PIPELINE_ID make build
    - IMAGE_TAG=$CI_PIPELINE_ID make test-image
    - IMAGE_TAG=$CI_PIPELINE_ID make push


# Run unit tests
#
# Note: this step also generates coverage report (HTML).
py39-unit:
  extends: .tests
  stage: test
  needs: []
  script:
    - tox -v -e py39-unit-tests -- --cov=gluetool_modules_framework --cov-report=html:coverage-report
  artifacts:
    paths:
      - coverage-report

# Static analysis - pylint, flake8
py39-static:
  extends: .tests
  stage: test
  needs: []
  script:
    - tox -v -e py39-static-analysis

# Static analysis - coala
#
# Note: coala integration is better done directly via gitlab's docker support
static-coala:
  extends: .merge-request
  stage: test
  needs: []
  image: quay.io/testing-farm/coala:latest
  script:
    - /usr/bin/coala --non-interactive --config .coafile

# Static analysis - type checks
type-check:
  extends: [.colors, .merge-request]
  stage: test
  needs: []
  script:
    - tox -v -e type-check

# Static analysis - pre-commit
pre-commit:
  extends: .merge-request
  stage: test
  needs: []
  script:
    - dnf -y install pre-commit
    - poetry --version
    - pre-commit run --show-diff-on-failure --all-files

# Run all tmt plans via Testing Farm
testing-farm:
  extends: .merge-request
  stage: test
  needs: []
  image: quay.io/testing-farm/cli:latest
  script:
    - testing-farm request --git-ref $CI_MERGE_REQUEST_REF_PATH --git-url $CI_MERGE_REQUEST_PROJECT_URL

# Run gluetool-modules integration tests against staging environment and Artemis CI instance
# Note that we spin a new Artemis instance so the localhost get's access to Artemis API and guests
integration:
  extends: .merge-request
  stage: test
  needs:
    - container
    - pre-commit
    - py39-static
    - py39-unit
    - type-check
  variables:
    INFRA_REPO: https://gitlab.com/testing-farm/infrastructure
    INFRA_PATH: infrastructure
    INFRA_BRANCH: main
    # Use the gluetool-modules image build in the "container" step
    WORKER_IMAGE: quay.io/testing-farm/gluetool-modules:$CI_PIPELINE_ID
    CI_ARTIFACT_URL_PREFIX: "https://testing-farm.gitlab.io/-/gluetool-modules/-/jobs/$CI_JOB_ID/artifacts"
  before_script:
    # Use public nameservers to mitigate the EKS cluster to be reolved locally.
    # A known issues due to the AWS setup we use.
    - printf "nameserver 1.1.1.1\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n" > /etc/resolv.conf
    # Get merge request description text
    - >
      description=$(
        curl $CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID | jq -r .description
      )
    # Parse infrastructure repository from description
    - >
      if grep '!infra-repo' <<< $description; then
        INFRA_REPO=$(grep '!infra-repo' <<< $description | sed 's/.*!infra-repo:\?//' | tr -d '[:space:]');
        echo "Forcing infrastructure repository '$INFRA_REPO'"
      fi
    # Parse infrastructure branch from description
    - >
      if grep '!infra-branch' <<< $description; then
        INFRA_BRANCH=$(grep '!infra-branch' <<< $description | sed 's/.*!infra-branch:\?//' | tr -d '[:space:]');
        echo "Forcing infrastructure repository branch '$INFRA_BRANCH'"
      fi
    # Parse pytest options from description
    - >
      if grep '!pytest-options' <<< $description; then
        export PYTEST_OPTIONS=$(grep '!pytest-options' <<< $description | sed 's/.*!pytest-options:\?//');
        echo "Forcing pytest options '$PYTEST_OPTIONS'"
      fi
    - git clone -b $INFRA_BRANCH $INFRA_REPO $INFRA_PATH && cd $INFRA_PATH
    - dnf -y install direnv libffi libffi-devel podman buildah
    - echo -n "$INFRA_VAULT_PASSWORD" > .vault_pass
    - podman login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io
  script:
    - direnv allow
    - eval "$(direnv export bash)"
    - make staging/apply/artemis/ci
    - make generate/staging/citool-config/ci
    - make test/staging/pipeline/ci
  artifacts:
    paths:
      - $INFRA_PATH/.pytest
      - $INFRA_PATH/assets/style.css
      - $INFRA_PATH/report.html
    when: always

  after_script:
    - cd $INFRA_PATH
    - direnv allow
    - eval "$(direnv export bash)"
    # NOTE: this leaks secrets, rather hide it
    - make staging/destroy/artemis/ci &> /dev/null

# Generate documentation from the sources
#
# Note: executed for all commits in all branches to make sure it is actually possible
# to generate the documentation - serves as a sort of a "test" on its own. citool
# uses docstrings to generate command-line help, it is useful to check whether these
# docstrings are readable and sane.
py39-generate-docs:
  extends: .tests
  stage: test
  needs: []
  script:
    - tox -v -e py39-doctest -- ./docs
  artifacts:
    paths:
      - .tox/py39-doctest/tmp/docs/build/html

#
# DEPLOY steps
#
publish/container/latest:
  stage: deploy
  image: quay.io/buildah/stable:$BUILDAH_TAG
  script:
    - dnf -y install make poetry python3.9
    - buildah login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io
    - IMAGE_TAG=latest make build
    - IMAGE_TAG=latest make push
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"

publish/container/tag:
  stage: deploy
  image: quay.io/buildah/stable:$BUILDAH_TAG
  script:
    - dnf -y install make poetry python3.9
    - buildah login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io
    - IMAGE_TAG=$CI_COMMIT_TAG make build
    - IMAGE_TAG=$CI_COMMIT_TAG make push
  rules:
    - if: $CI_COMMIT_TAG
