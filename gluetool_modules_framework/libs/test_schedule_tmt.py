# Copyright Contributors to the Testing Farm project.
# SPDX-License-Identifier: Apache-2.0
#
# This file contains common code user in:
# * gluetool_modules_framework/testing/test_schedule_tmt.py
# * gluetool_modules_framework/testing/test_schedule_tmt_multihost.py
from attr import validators
import attrs
import enum
from typing import Any, Dict, List, Union
import re

from gluetool_modules_framework.libs.test_schedule import TestScheduleResult

# TMT run log file
TMT_LOG = 'tmt-run.log'
TMT_REPRODUCER = 'tmt-reproducer.sh'
TMT_VERBOSE_LOG = 'log.txt'

# File with environment variables
TMT_ENV_FILE = 'tmt-environment-{}.yaml'

# Maximum size of logs read in MiB
DEFAULT_RESULT_LOG_MAX_SIZE = 10

# Discovered YAML file, contains list of tests, relative to plan workdir
DISCOVERED_TESTS_YAML = "discover/tests.yaml"

# Results YAML file, contains list of test run results, relative to plan workdir
RESULTS_YAML = "execute/results.yaml"

# Weight of a test result, used to count the overall result. Higher weight has precendence
# when counting the overall result. See https://tmt.readthedocs.io/en/latest/spec/steps.html#execute
RESULT_WEIGHT = {
    'skip': 0,
    'pass': 1,
    'info': 1,
    'fail': 2,
    'warn': 2,
    'pending': 3,
    'error': 3,
}

# Map tmt results to our expected results
#
# Note that we comply to
#
#     https://pagure.io/fedora-ci/messages/blob/master/f/schemas/test-complete.yaml
#
# TMT recognized `error` for a test, but we do not translate it to a TestScheduleResult
# error, as this error is user facing, nothing we can do about it to fix it, it is his problem.
#
# For more context see: https://pagure.io/fedora-ci/messages/pull-request/86
RESULT_OUTCOME = {
    'pass': 'passed',
    'info': 'info',
    'fail': 'failed',
    'warn': 'needs_inspection',
    'error': 'error',
    'skip': 'not_applicable',
    'pending': 'pending',
}

# Result weight to TestScheduleResult outcome
#
#     https://tmt.readthedocs.io/en/latest/overview.html#exit-codes
#
# All tmt errors are connected to tests or config, so only higher return code than 3
# is treated as error
PLAN_OUTCOME = {
    0: TestScheduleResult.SKIPPED,
    1: TestScheduleResult.PASSED,
    2: TestScheduleResult.FAILED,
    3: TestScheduleResult.FAILED,
}

# Result weight to TestScheduleResult outcome
#
#     https://tmt.readthedocs.io/en/latest/overview.html#exit-codes
#
# All tmt errors are connected to tests or config, so only higher return code than 3
# is treated as error
PLAN_OUTCOME_WITH_ERROR = {
    0: TestScheduleResult.SKIPPED,
    1: TestScheduleResult.PASSED,
    2: TestScheduleResult.FAILED,
    3: TestScheduleResult.ERROR,
}


def safe_name(name: str) -> str:
    """
    A safe variant of the name which does not contain special characters.

    Spaces and other special characters are removed to prevent problems with
    tools which do not expect them (e.g. in directory names).

    Workaround for https://github.com/teemtee/tmt/issues/1857
    """

    return re.sub(r"[^\w/-]+", "-", name).strip("-")


# https://tmt.readthedocs.io/en/latest/overview.html#exit-codes
class TMTExitCodes(enum.IntEnum):
    TESTS_PASSED = 0
    TESTS_FAILED = 1
    TESTS_ERROR = 2
    RESULTS_MISSING = 3
    TESTS_SKIPPED = 4


@attrs.define(kw_only=True)
class TMTDiscoveredTest:
    """
    Represents an element in `tests.yaml` file generated by tmt in the discovery phase.
    The file contains a list of discovered tests (list['TMTDiscoveredTest']).
    The actual file contains more items, this class lists only those that are used in the
    gluetool module.

    Instances of this class will be futher parsed into `TestResult` instances.

    For the complete defintion of the `tests.yaml` file, see:
    * https://tmt.readthedocs.io/en/stable/spec/plans.html#discover
    """
    name: str = attrs.field(validator=attrs.validators.instance_of(str))
    # According to the tmt documentation, contact is optional.
    # https://github.com/teemtee/tmt/blob/main/tmt/schemas/test.yaml
    contact: List[str] = attrs.field(
        default=[],
        validator=attrs.validators.deep_iterable(
            member_validator=attrs.validators.instance_of(str),
            iterable_validator=attrs.validators.instance_of(list)
        )
    )
    serial_number: int = attrs.field(validator=validators.instance_of(int))

    @classmethod
    def _structure(cls, data: Dict[str, Any]) -> 'TMTDiscoveredTest':
        return TMTDiscoveredTest(name=data["name"],
                                 contact=data.get("contact", []),
                                 serial_number=data["serial-number"]
                                 )


def get_test_contacts(test_name: str, test_serial_number: Union[int, None],
                      tests: List[TMTDiscoveredTest]) -> List[str]:
    """
    Extracts contacts from a list of tests for a specific test name..

    Args:
    * test_name: Name of the test
    * test: TMTDiscoveredTest instance
    * test_serial_number: Serial number of the test

    Returns:
    * List of contacts or None
    """
    for test in tests:
        if test_name == test.name and test_serial_number == test.serial_number:
            return test.contact
    return []
