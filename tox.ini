[tox]
isolated_build = true
envlist = {py37,py39}-{unit-tests,static-analysis,static-analysis-coala,doctest}

[testenv]
sitepackages = False
skip_install = true
whitelist_externals = poetry
                      /usr/bin/ansible-playbook
                      sh
commands_pre = poetry install -v
passenv = POETRY_ADDOPTS MYPY_FORCE_COLOR PYTEST_ADDOPTS TERMINFO TERM PYCURL_SSL_LIBRARY

setenv =
  ANSIBLE_CALLBACK_WHITELIST=profile_tasks
  ANSIBLE_STDOUT_CALLBACK=debug
  REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt

[testenv:{py37,py39}-unit-tests]
commands = /usr/bin/ansible-playbook inject-extra-requirements.yml
           pytest -vv -ra --ignore=docs/source/module_parsers.py -m 'not integration' {posargs}

[testenv:{py37,py39}-static-analysis]
commands = /usr/bin/ansible-playbook inject-extra-requirements.yml
           pytest -vv -ra --flake8 --ignore=gluetool_modules_framework/tests/ --ignore=docs/source/module_parsers.py -m 'not integration' {posargs}
           /bin/sh -c "yamllint -c .yamllint-moduleinfo $(find gluetool_modules_framework/ -name *.moduleinfo)"

[testenv:{py37,py39}-doctest]
commands = /usr/bin/ansible-playbook inject-extra-requirements.yml
           /usr/bin/ansible-playbook generate-docs.yml -e generate_dir={envtmpdir}/docs

[testenv:{py37,py39}-static-analysis-coala]
whitelist_externals = {[testenv]whitelist_externals}
                      docker
commands = docker run -ti --rm -v {toxinidir}:/gluetool_modules_framework:z --workdir=/gluetool_modules_framework coala/base coala -c /gluetool_modules_framework/.coafile --non-interactive

[testenv:{py37,py39}-integration-tests]
commands = /usr/bin/ansible-playbook inject-extra-requirements.yml
           pytest -vv -ra --ignore=docs/source/module_parsers.py -m 'integration' {posargs}

[testenv:type-check]
whitelist_externals = bash
commands_pre =
basepython = python3.9
skip_install = True
isolated_build = false
deps =
    mypy==0.812
    mypy-extensions==0.4.3
setenv =
    MYPYPATH = {envdir}/mypy-libs/gluetool
# mypy needs imported libraries to type-check our code, but gluetool nor gluetool-modules cannot
# be installed under Python 3 yet. Therefore we need to "download" them, and set MYPYPATH to let mypy
# reach them.
commands = bash -c '[ -d {envdir}/mypy-libs ] || mkdir -p {envdir}/mypy-libs'
           bash -c '[ -d {envdir}/mypy-libs/gluetool ] || git clone --branch main --depth 1 https://gitlab.com/testing-farm/gluetool.git {envdir}/mypy-libs/gluetool'

# --no-warn-unused-ignores: there are some unused warnings we cannot disable - they are used in Python 3, unused in
# Python 2 and vice versa.
#
# --implicit-reexport: `--strict` option enabled few important checks, among them activates `--no-implicit-reexport`
# which means no symbols from __all__ variables. This is a trouble since we import *a lot* things like gluetool.Module.
# Re-enabling it to make our life easier.
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --no-warn-unused-ignores \
                --implicit-reexport \
                {toxinidir}/gluetool_modules_framework/libs/ \
                {toxinidir}/gluetool_modules_framework/pipelines/ \
                {toxinidir}/gluetool_modules_framework/provision/ \
                {toxinidir}/gluetool_modules_framework/static_analysis/ \
                {toxinidir}/gluetool_modules_framework/testing/ \
                {toxinidir}/gluetool_modules_framework/helpers/ \
                {toxinidir}/gluetool_modules_framework/infrastructure/ \
                {toxinidir}/gluetool_modules_framework/tools/ \
                {toxinidir}/gluetool_modules_framework/testing_farm/ \
                {toxinidir}/gluetool_modules_framework/database/ \
                {toxinidir}/gluetool_modules_framework/dispatchers/ \
                {posargs}
